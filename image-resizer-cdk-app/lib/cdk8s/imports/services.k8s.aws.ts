// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * AdoptedResource is the schema for the AdoptedResource API.
 *
 * @schema AdoptedResource
 */
export class AdoptedResource extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AdoptedResource"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'services.k8s.aws/v1alpha1',
    kind: 'AdoptedResource',
  }

  /**
   * Renders a Kubernetes manifest for "AdoptedResource".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AdoptedResourceProps = {}): any {
    return {
      ...AdoptedResource.GVK,
      ...toJson_AdoptedResourceProps(props),
    };
  }

  /**
   * Defines a "AdoptedResource" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AdoptedResourceProps = {}) {
    super(scope, id, {
      ...AdoptedResource.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AdoptedResource.GVK,
      ...toJson_AdoptedResourceProps(resolved),
    };
  }
}

/**
 * AdoptedResource is the schema for the AdoptedResource API.
 *
 * @schema AdoptedResource
 */
export interface AdoptedResourceProps {
  /**
   * @schema AdoptedResource#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * AdoptedResourceSpec defines the desired state of the AdoptedResource.
   *
   * @schema AdoptedResource#spec
   */
  readonly spec?: AdoptedResourceSpec;

}

/**
 * Converts an object of type 'AdoptedResourceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AdoptedResourceProps(obj: AdoptedResourceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AdoptedResourceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AdoptedResourceSpec defines the desired state of the AdoptedResource.
 *
 * @schema AdoptedResourceSpec
 */
export interface AdoptedResourceSpec {
  /**
   * AWSIdentifiers provide all unique ways to reference an AWS resource.
   *
   * @schema AdoptedResourceSpec#aws
   */
  readonly aws: AdoptedResourceSpecAws;

  /**
   * ResourceWithMetadata provides the values necessary to create a Kubernetes resource and override any of its metadata values.
   *
   * @schema AdoptedResourceSpec#kubernetes
   */
  readonly kubernetes: AdoptedResourceSpecKubernetes;

}

/**
 * Converts an object of type 'AdoptedResourceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AdoptedResourceSpec(obj: AdoptedResourceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'aws': toJson_AdoptedResourceSpecAws(obj.aws),
    'kubernetes': toJson_AdoptedResourceSpecKubernetes(obj.kubernetes),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AWSIdentifiers provide all unique ways to reference an AWS resource.
 *
 * @schema AdoptedResourceSpecAws
 */
export interface AdoptedResourceSpecAws {
  /**
   * AdditionalKeys represents any additional arbitrary identifiers used when describing the target resource.
   *
   * @schema AdoptedResourceSpecAws#additionalKeys
   */
  readonly additionalKeys?: { [key: string]: string };

  /**
   * ARN is the AWS Resource Name for the resource. It is a globally unique identifier.
   *
   * @schema AdoptedResourceSpecAws#arn
   */
  readonly arn?: string;

  /**
   * NameOrId is a user-supplied string identifier for the resource. It may or may not be globally unique, depending on the type of resource.
   *
   * @schema AdoptedResourceSpecAws#nameOrID
   */
  readonly nameOrId?: string;

}

/**
 * Converts an object of type 'AdoptedResourceSpecAws' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AdoptedResourceSpecAws(obj: AdoptedResourceSpecAws | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalKeys': ((obj.additionalKeys) === undefined) ? undefined : (Object.entries(obj.additionalKeys).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'arn': obj.arn,
    'nameOrID': obj.nameOrId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceWithMetadata provides the values necessary to create a Kubernetes resource and override any of its metadata values.
 *
 * @schema AdoptedResourceSpecKubernetes
 */
export interface AdoptedResourceSpecKubernetes {
  /**
   * @schema AdoptedResourceSpecKubernetes#group
   */
  readonly group: string;

  /**
   * @schema AdoptedResourceSpecKubernetes#kind
   */
  readonly kind: string;

  /**
   * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. It is not possible to use `metav1.ObjectMeta` inside spec, as the controller-gen automatically converts this to an arbitrary string-string map. https://github.com/kubernetes-sigs/controller-tools/issues/385
   * Active discussion about inclusion of this field in the spec is happening in this PR: https://github.com/kubernetes-sigs/controller-tools/pull/395
   * Until this is allowed, or if it never is, we will produce a subset of the object meta that contains only the fields which the user is allowed to modify in the metadata.
   *
   * @schema AdoptedResourceSpecKubernetes#metadata
   */
  readonly metadata?: AdoptedResourceSpecKubernetesMetadata;

}

/**
 * Converts an object of type 'AdoptedResourceSpecKubernetes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AdoptedResourceSpecKubernetes(obj: AdoptedResourceSpecKubernetes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'metadata': toJson_AdoptedResourceSpecKubernetesMetadata(obj.metadata),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. It is not possible to use `metav1.ObjectMeta` inside spec, as the controller-gen automatically converts this to an arbitrary string-string map. https://github.com/kubernetes-sigs/controller-tools/issues/385
 * Active discussion about inclusion of this field in the spec is happening in this PR: https://github.com/kubernetes-sigs/controller-tools/pull/395
 * Until this is allowed, or if it never is, we will produce a subset of the object meta that contains only the fields which the user is allowed to modify in the metadata.
 *
 * @schema AdoptedResourceSpecKubernetesMetadata
 */
export interface AdoptedResourceSpecKubernetesMetadata {
  /**
   * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
   *
   * @schema AdoptedResourceSpecKubernetesMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
   * If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
   * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
   *
   * @schema AdoptedResourceSpecKubernetesMetadata#generateName
   */
  readonly generateName?: string;

  /**
   * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
   *
   * @schema AdoptedResourceSpecKubernetesMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
   *
   * @schema AdoptedResourceSpecKubernetesMetadata#name
   */
  readonly name?: string;

  /**
   * Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
   * Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
   *
   * @schema AdoptedResourceSpecKubernetesMetadata#namespace
   */
  readonly namespace?: string;

  /**
   * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
   *
   * @schema AdoptedResourceSpecKubernetesMetadata#ownerReferences
   */
  readonly ownerReferences?: AdoptedResourceSpecKubernetesMetadataOwnerReferences[];

}

/**
 * Converts an object of type 'AdoptedResourceSpecKubernetesMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AdoptedResourceSpecKubernetesMetadata(obj: AdoptedResourceSpecKubernetesMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'generateName': obj.generateName,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
    'ownerReferences': obj.ownerReferences?.map(y => toJson_AdoptedResourceSpecKubernetesMetadataOwnerReferences(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
 *
 * @schema AdoptedResourceSpecKubernetesMetadataOwnerReferences
 */
export interface AdoptedResourceSpecKubernetesMetadataOwnerReferences {
  /**
   * API version of the referent.
   *
   * @schema AdoptedResourceSpecKubernetesMetadataOwnerReferences#apiVersion
   */
  readonly apiVersion: string;

  /**
   * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
   *
   * @default false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
   * @schema AdoptedResourceSpecKubernetesMetadataOwnerReferences#blockOwnerDeletion
   */
  readonly blockOwnerDeletion?: boolean;

  /**
   * If true, this reference points to the managing controller.
   *
   * @schema AdoptedResourceSpecKubernetesMetadataOwnerReferences#controller
   */
  readonly controller?: boolean;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema AdoptedResourceSpecKubernetesMetadataOwnerReferences#kind
   */
  readonly kind: string;

  /**
   * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
   *
   * @schema AdoptedResourceSpecKubernetesMetadataOwnerReferences#name
   */
  readonly name: string;

  /**
   * UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
   *
   * @schema AdoptedResourceSpecKubernetesMetadataOwnerReferences#uid
   */
  readonly uid: string;

}

/**
 * Converts an object of type 'AdoptedResourceSpecKubernetesMetadataOwnerReferences' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AdoptedResourceSpecKubernetesMetadataOwnerReferences(obj: AdoptedResourceSpecKubernetesMetadataOwnerReferences | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'blockOwnerDeletion': obj.blockOwnerDeletion,
    'controller': obj.controller,
    'kind': obj.kind,
    'name': obj.name,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * FieldExport is the schema for the FieldExport API.
 *
 * @schema FieldExport
 */
export class FieldExport extends ApiObject {
  /**
   * Returns the apiVersion and kind for "FieldExport"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'services.k8s.aws/v1alpha1',
    kind: 'FieldExport',
  }

  /**
   * Renders a Kubernetes manifest for "FieldExport".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: FieldExportProps = {}): any {
    return {
      ...FieldExport.GVK,
      ...toJson_FieldExportProps(props),
    };
  }

  /**
   * Defines a "FieldExport" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: FieldExportProps = {}) {
    super(scope, id, {
      ...FieldExport.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...FieldExport.GVK,
      ...toJson_FieldExportProps(resolved),
    };
  }
}

/**
 * FieldExport is the schema for the FieldExport API.
 *
 * @schema FieldExport
 */
export interface FieldExportProps {
  /**
   * @schema FieldExport#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * FieldExportSpec defines the desired state of the FieldExport.
   *
   * @schema FieldExport#spec
   */
  readonly spec?: FieldExportSpec;

}

/**
 * Converts an object of type 'FieldExportProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FieldExportProps(obj: FieldExportProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_FieldExportSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FieldExportSpec defines the desired state of the FieldExport.
 *
 * @schema FieldExportSpec
 */
export interface FieldExportSpec {
  /**
   * ResourceFieldSelector provides the values necessary to identify an individual field on an individual K8s resource.
   *
   * @schema FieldExportSpec#from
   */
  readonly from: FieldExportSpecFrom;

  /**
   * FieldExportTarget provides the values necessary to identify the output path for a field export.
   *
   * @schema FieldExportSpec#to
   */
  readonly to: FieldExportSpecTo;

}

/**
 * Converts an object of type 'FieldExportSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FieldExportSpec(obj: FieldExportSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': toJson_FieldExportSpecFrom(obj.from),
    'to': toJson_FieldExportSpecTo(obj.to),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceFieldSelector provides the values necessary to identify an individual field on an individual K8s resource.
 *
 * @schema FieldExportSpecFrom
 */
export interface FieldExportSpecFrom {
  /**
   * @schema FieldExportSpecFrom#path
   */
  readonly path: string;

  /**
   * NamespacedResource provides all the values necessary to identify an ACK resource of a given type (within the same namespace as the custom resource containing this type).
   *
   * @schema FieldExportSpecFrom#resource
   */
  readonly resource: FieldExportSpecFromResource;

}

/**
 * Converts an object of type 'FieldExportSpecFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FieldExportSpecFrom(obj: FieldExportSpecFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
    'resource': toJson_FieldExportSpecFromResource(obj.resource),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FieldExportTarget provides the values necessary to identify the output path for a field export.
 *
 * @schema FieldExportSpecTo
 */
export interface FieldExportSpecTo {
  /**
   * FieldExportOutputType represents all types that can be produced by a field export operation
   *
   * @schema FieldExportSpecTo#kind
   */
  readonly kind: FieldExportSpecToKind;

  /**
   * @schema FieldExportSpecTo#name
   */
  readonly name: string;

  /**
   * Namespace is marked as optional, so we cannot compose `NamespacedName`
   *
   * @schema FieldExportSpecTo#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'FieldExportSpecTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FieldExportSpecTo(obj: FieldExportSpecTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NamespacedResource provides all the values necessary to identify an ACK resource of a given type (within the same namespace as the custom resource containing this type).
 *
 * @schema FieldExportSpecFromResource
 */
export interface FieldExportSpecFromResource {
  /**
   * @schema FieldExportSpecFromResource#group
   */
  readonly group: string;

  /**
   * @schema FieldExportSpecFromResource#kind
   */
  readonly kind: string;

  /**
   * @schema FieldExportSpecFromResource#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'FieldExportSpecFromResource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FieldExportSpecFromResource(obj: FieldExportSpecFromResource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FieldExportOutputType represents all types that can be produced by a field export operation
 *
 * @schema FieldExportSpecToKind
 */
export enum FieldExportSpecToKind {
  /** configmap */
  CONFIGMAP = 'configmap',
  /** secret */
  SECRET = 'secret',
}

